name: Claude PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [develop, main]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  claude-review:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **/*.java
            **/*.gradle
            **/*.properties
            **/*.md
            **/*.json
            **/*.ts
            **/*.tsx
            **/*.js
          separator: " "

      - name: Get PR diff
        id: pr-diff
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Getting diff for changed files..."

          # Get the diff for changed files with better formatting
          git diff origin/${{ github.event.pull_request.base.ref }}...HEAD -- ${{ steps.changed-files.outputs.all_changed_files }} > pr_diff.txt

          # Check diff size and truncate if necessary
          DIFF_SIZE=$(wc -c < pr_diff.txt)
          echo "Diff size: $DIFF_SIZE bytes"

          if [ $DIFF_SIZE -gt 80000 ]; then
            echo "Diff too large ($DIFF_SIZE bytes), truncating to 80KB..."
            head -c 80000 pr_diff.txt > pr_diff_truncated.txt
            mv pr_diff_truncated.txt pr_diff.txt
            echo "" >> pr_diff.txt
            echo "... [DIFF TRUNCATED DUE TO SIZE - Original: ${DIFF_SIZE} bytes]" >> pr_diff.txt
          fi

          echo "Final diff size: $(wc -c < pr_diff.txt) bytes"

      - name: Read project guidelines
        id: guidelines
        run: |
          echo "Reading project guidelines..."

          # Read CLAUDE.md if it exists
          if [ -f "CLAUDE.md" ]; then
            echo "Found CLAUDE.md"
            # Take first 12000 chars to avoid oversized prompts
            head -c 12000 CLAUDE.md > claude_guidelines.txt
          else
            echo "CLAUDE.md not found"
            echo "No specific guidelines found" > claude_guidelines.txt
          fi

      - name: Prepare Claude API request
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Preparing Claude API request..."

          # Read diff content
          DIFF_CONTENT=""
          if [ -f pr_diff.txt ]; then
            DIFF_CONTENT=$(cat pr_diff.txt)
          fi

          # Read guidelines
          GUIDELINES=""
          if [ -f claude_guidelines.txt ]; then
            GUIDELINES=$(cat claude_guidelines.txt)
          fi

          # Create JSON payload for Claude API using Python for proper escaping
          python3 << 'PYTHON_SCRIPT'
          import json
          import os

          # Read diff and guidelines
          diff_content = ""
          try:
              with open('pr_diff.txt', 'r') as f:
                  diff_content = f.read()
          except:
              diff_content = "No diff available"

          guidelines = ""
          try:
              with open('claude_guidelines.txt', 'r') as f:
                  guidelines = f.read()
          except:
              guidelines = "No guidelines available"

          # Create the request payload
          request_data = {
              "model": "claude-3-5-sonnet-20241022",
              "max_tokens": 4000,
              "system": f"""You are an expert code reviewer for the Signum Node blockchain project. This is critical cryptocurrency infrastructure requiring strict security and quality standards.

Project Context:
- Java 21 blockchain node implementation
- Layered architecture: API → Services → Stores → Database
- Uses Gradle, JUnit 5, Mockito, JOOQ, Flyway
- Multi-database support: SQLite/MariaDB/PostgreSQL

Review Priorities:
1. SECURITY: Input validation, crypto usage, SQL injection prevention
2. ARCHITECTURE: Layer separation, dependency injection, package structure
3. TESTING: Unit tests for all new/modified code with proper mocking
4. DESIGN PATTERNS: Factory, Observer, Strategy, Command, Template Method
5. CODE QUALITY: Clean, maintainable, SOLID principles
6. PERFORMANCE: Efficient database access, resource management

Project Guidelines:
{guidelines}

CRITICAL RULES:
- Never allow direct database access from business logic
- Require unit tests for all new methods
- Enforce constructor dependency injection
- Validate all external inputs
- Use specific exception types
- Follow existing package structure

Provide specific feedback with file:line references. Mark security issues with ⚠️, missing tests with ❌, good practices with ✅.""",
              "messages": [
                  {
                      "role": "user",
                      "content": f"""Review this Pull Request for Signum Node:

**Title:** {os.environ.get('PR_TITLE', 'No title')}

**Description:**
{os.environ.get('PR_BODY', 'No description')}

**Changed Files:**
{os.environ.get('CHANGED_FILES', 'No files')}

**Code Changes:**
```diff
{diff_content}
```

Focus on:
- Security vulnerabilities (input validation, crypto misuse)
- Architecture violations (layer skipping, direct DB access)
- Missing or inadequate tests
- Design pattern misuse
- Code quality issues
- Performance problems

Provide actionable feedback with specific file and line references."""
                  }
              ]
          }

          # Write to file
          with open('claude_request.json', 'w') as f:
              json.dump(request_data, f, indent=2)
          PYTHON_SCRIPT

          # Set environment variables for Python script
          export PR_TITLE="${{ github.event.pull_request.title }}"
          export PR_BODY="${{ github.event.pull_request.body }}"
          export CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"

          # Pass environment variables to Python script
          python3 -c "
          import json
          import os

          # Read diff and guidelines
          diff_content = ''
          try:
              with open('pr_diff.txt', 'r') as f:
                  diff_content = f.read()
          except:
              diff_content = 'No diff available'

          guidelines = ''
          try:
              with open('claude_guidelines.txt', 'r') as f:
                  guidelines = f.read()
          except:
              guidelines = 'No guidelines available'

          # Get environment variables
          pr_title = os.environ.get('PR_TITLE', 'No title')
          pr_body = os.environ.get('PR_BODY', 'No description')
          changed_files = os.environ.get('CHANGED_FILES', 'No files')

          # Create the request payload
          request_data = {
              'model': 'claude-3-5-sonnet-20241022',
              'max_tokens': 4000,
              'system': f'''You are an expert code reviewer for the Signum Node blockchain project. This is critical cryptocurrency infrastructure requiring strict security and quality standards.

          Project Context:
          - Java 21 blockchain node implementation
          - Layered architecture: API → Services → Stores → Database
          - Uses Gradle, JUnit 5, Mockito, JOOQ, Flyway
          - Multi-database support: SQLite/MariaDB/PostgreSQL

          Review Priorities:
          1. SECURITY: Input validation, crypto usage, SQL injection prevention
          2. ARCHITECTURE: Layer separation, dependency injection, package structure
          3. TESTING: Unit tests for all new/modified code with proper mocking
          4. DESIGN PATTERNS: Factory, Observer, Strategy, Command, Template Method
          5. CODE QUALITY: Clean, maintainable, SOLID principles
          6. PERFORMANCE: Efficient database access, resource management

          Project Guidelines:
          {guidelines}

          CRITICAL RULES:
          - Never allow direct database access from business logic
          - Require unit tests for all new methods
          - Enforce constructor dependency injection
          - Validate all external inputs
          - Use specific exception types
          - Follow existing package structure

          Provide specific feedback with file:line references. Mark security issues with ⚠️, missing tests with ❌, good practices with ✅.''',
              'messages': [
                  {
                      'role': 'user',
                      'content': f'''Review this Pull Request for Signum Node:

          **Title:** {pr_title}

          **Description:**
          {pr_body}

          **Changed Files:**
          {changed_files}

          **Code Changes:**
          ```diff
          {diff_content}
          ```

          Focus on:
          - Security vulnerabilities (input validation, crypto misuse)
          - Architecture violations (layer skipping, direct DB access)
          - Missing or inadequate tests
          - Design pattern misuse
          - Code quality issues
          - Performance problems

          Provide actionable feedback with specific file and line references.'''
                  }
              ]
          }

          # Write to file
          with open('claude_request.json', 'w') as f:
              json.dump(request_data, f, indent=2)
          "

      - name: Call Claude API
        if: steps.changed-files.outputs.any_changed == 'true'
        id: claude-api
        run: |
          echo "Calling Claude API..."

          # Make API call to Claude
          HTTP_STATUS=$(curl -w "%{http_code}" -s -o claude_response.json \
            -X POST "https://api.anthropic.com/v1/messages" \
            -H "Content-Type: application/json" \
            -H "x-api-key: ${{ secrets.CLAUDE_API_KEY }}" \
            -H "anthropic-version: 2023-06-01" \
            -d @claude_request.json)

          echo "HTTP Status: $HTTP_STATUS"

          if [ "$HTTP_STATUS" != "200" ]; then
            echo "API call failed with status $HTTP_STATUS"
            echo "Response:"
            cat claude_response.json
            echo "api_success=false" >> $GITHUB_OUTPUT
            exit 0  # Don't fail the workflow, just skip review
          fi

          # Extract review content from response
          REVIEW_CONTENT=$(python3 -c "
          import json
          import sys
          try:
              with open('claude_response.json', 'r') as f:
                  data = json.load(f)
              if 'content' in data and len(data['content']) > 0:
                  print(data['content'][0]['text'])
              else:
                  print('Error: No content in Claude response')
          except Exception as e:
              print(f'Error parsing Claude response: {e}')
          ")

          # Save review to file for next step
          echo "$REVIEW_CONTENT" > claude_review.txt
          echo "api_success=true" >> $GITHUB_OUTPUT

      - name: Post review comment
        if: steps.claude-api.outputs.api_success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let reviewContent = '';
            try {
              reviewContent = fs.readFileSync('claude_review.txt', 'utf8');
            } catch (error) {
              console.log('Could not read review file:', error);
              return;
            }

            if (reviewContent.trim().length === 0) {
              console.log('Review content is empty');
              return;
            }

            const comment = \`## 🤖 Claude AI Code Review

\${reviewContent}

---
*This review was generated automatically by Claude AI using the project's coding guidelines. Please address any ⚠️ security issues and ❌ missing tests before merging.*

**Changed files:** ${{ steps.changed-files.outputs.all_changed_files }}\`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });

      - name: Check for blocking issues
        if: steps.claude-api.outputs.api_success == 'true'
        run: |
          echo "Checking for critical issues..."

          if [ -f claude_review.txt ]; then
            # Check for security warnings or critical issues
            if grep -i "⚠️\|critical\|security.*vulnerability\|sql.*injection\|hardcoded.*secret" claude_review.txt; then
              echo "🚨 Critical security issues detected!"
              echo "blocking_issues=true" >> $GITHUB_OUTPUT
              echo "CRITICAL_ISSUES_FOUND=true" >> $GITHUB_ENV
            else
              echo "✅ No critical blocking issues found"
              echo "blocking_issues=false" >> $GITHUB_OUTPUT
              echo "CRITICAL_ISSUES_FOUND=false" >> $GITHUB_ENV
            fi
          fi

      - name: Summary
        if: always()
        run: |
          echo "## Claude PR Review Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Files analyzed:** ${{ steps.changed-files.outputs.all_changed_files_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API call status:** ${{ steps.claude-api.outputs.api_success }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ env.CRITICAL_ISSUES_FOUND }}" == "true" ]; then
            echo "- **Critical issues:** ⚠️ Found - Review required" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Critical issues:** ✅ None detected" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.changed-files.outputs.any_changed }}" == "true" ]; then
            echo "- **Review posted:** ✅ Check PR comments" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Review posted:** ⏭️ No relevant files changed" >> $GITHUB_STEP_SUMMARY
          fi
